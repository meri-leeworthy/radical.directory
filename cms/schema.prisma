// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider   = "prisma-client-js"
  output     = "node_modules/.prisma/client"
  engineType = "binary"
}

model User {
  id          String    @id @default(cuid())
  name        String    @default("")
  email       String    @unique @default("")
  password    String
  posts       Post[]    @relation("Post_author_User_posts")
  surname     String?
  avatar      String?
  pronouns    String?
  bio         String?
  postcode    String?
  website     String?
  role        Role?     @relation("User_role", fields: [roleId], references: [id])
  roleId      String?   @map("role")
  memberOf    Project[] @relation("Project_members_User_memberOf")
  eventSubs   Event[]   @relation("Event_subscribers_User_eventSubs")
  projectSubs Project[] @relation("Project_subscribers_User_projectSubs")
  tagSubs     Tag[]     @relation("Tag_subscribers_User_tagSubs")

  @@index([roleId])
}

model Role {
  id               String  @id @default(cuid())
  name             String  @default("")
  canManageContent Boolean @default(false)
  canManageUsers   Boolean @default(false)
  users            User[]  @relation("User_role")
}

model Post {
  id                 String    @id @default(cuid())
  title              String    @default("")
  slug               String    @unique @default("")
  status             String?
  content            Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate        DateTime?
  author             User[]    @relation("Post_author_User_posts")
  tags               Tag[]     @relation("Post_tags_Tag_posts")
  from_Project_posts Project[] @relation("Project_posts_many")
  from_Event_posts   Event[]   @relation("Event_posts_many")
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @default("")
  posts       Post[]    @relation("Post_tags_Tag_posts")
  projects    Project[] @relation("Project_tags_Tag_projects")
  description Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  subscribers User[]    @relation("Tag_subscribers_User_tagSubs")
  events      Event[]   @relation("Event_tags_Tag_events")
}

model Image {
  id          String @id @default(cuid())
  filesize    Int?
  filename    String @default("")
  url         String @default("")
  mimetype    String @default("")
  description String @default("")
}

model Project {
  id          String    @id @default(cuid())
  name        String    @default("")
  acronym     String?
  description Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  members     User[]    @relation("Project_members_User_memberOf")
  subscribers User[]    @relation("Project_subscribers_User_projectSubs")
  parents     Project[] @relation("Project_children_Project_parents")
  children    Project[] @relation("Project_children_Project_parents")
  tags        Tag[]     @relation("Project_tags_Tag_projects")
  events      Event[]   @relation("Event_projects_Project_events")
  posts       Post[]    @relation("Project_posts_many")
}

model Event {
  id          String    @id @default(cuid())
  name        String    @default("")
  description Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  eventStart  DateTime
  eventEnd    DateTime?
  latitude    Float?
  longitude   Float?
  location    Json?
  url         String    @default("")
  projects    Project[] @relation("Event_projects_Project_events")
  posts       Post[]    @relation("Event_posts_many")
  subscribers User[]    @relation("Event_subscribers_User_eventSubs")
  tags        Tag[]     @relation("Event_tags_Tag_events")
}