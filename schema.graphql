input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Mutation {
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createFormation(data: FormationCreateInput!): Formation
  createFormations(data: [FormationCreateInput!]!): [Formation]
  updateFormation(
    where: FormationWhereUniqueInput!
    data: FormationUpdateInput!
  ): Formation
  updateFormations(data: [FormationUpdateArgs!]!): [Formation]
  deleteFormation(where: FormationWhereUniqueInput!): Formation
  deleteFormations(where: [FormationWhereUniqueInput!]!): [Formation]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  surname: String
  avatar: String
  pronouns: String
  bio: String
  town: String
  website: String
  role: Role
  formations(
    where: FormationWhereInput! = {}
    orderBy: [FormationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Formation!]
  formationsCount(where: FormationWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringNullableFilter
  email: StringNullableFilter
  password: PasswordFilter
  posts: PostManyRelationFilter
  surname: StringNullableFilter
  avatar: StringNullableFilter
  pronouns: StringNullableFilter
  bio: StringNullableFilter
  town: StringNullableFilter
  website: StringNullableFilter
  role: RoleWhereInput
  formations: FormationManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input FormationManyRelationFilter {
  every: FormationWhereInput
  some: FormationWhereInput
  none: FormationWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  surname: OrderDirection
  avatar: OrderDirection
  pronouns: OrderDirection
  bio: OrderDirection
  town: OrderDirection
  website: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  surname: String
  avatar: String
  pronouns: String
  bio: String
  town: String
  website: String
  role: RoleRelateToOneForUpdateInput
  formations: FormationRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input FormationRelateToManyForUpdateInput {
  disconnect: [FormationWhereUniqueInput!]
  set: [FormationWhereUniqueInput!]
  create: [FormationCreateInput!]
  connect: [FormationWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  surname: String
  avatar: String
  pronouns: String
  bio: String
  town: String
  website: String
  role: RoleRelateToOneForCreateInput
  formations: FormationRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input FormationRelateToManyForCreateInput {
  create: [FormationCreateInput!]
  connect: [FormationWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringNullableFilter
  canManageContent: BooleanNullableFilter
  canManageUsers: BooleanNullableFilter
  users: UserManyRelationFilter
}

input BooleanNullableFilter {
  equals: Boolean
  not: BooleanNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageContent: OrderDirection
  canManageUsers: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  slug: String
  status: String
  content: Post_content_DocumentField
  publishDate: String
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringNullableFilter
  slug: StringNullableFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input DateTimeNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  slug: String
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  formations(
    where: FormationWhereInput! = {}
    orderBy: [FormationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Formation!]
  formationsCount(where: FormationWhereInput! = {}): Int
  description: Tag_description_DocumentField
}

type Tag_description_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringNullableFilter
  posts: PostManyRelationFilter
  formations: FormationManyRelationFilter
}

input TagWhereUniqueInput {
  id: ID
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  formations: FormationRelateToManyForUpdateInput
  description: JSON
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  formations: FormationRelateToManyForCreateInput
  description: JSON
}

type Image {
  id: ID!
  filesize: Int
  filename: String
  url: String
  mimetype: String
  description: String
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  filesize: IntNullableFilter
  filename: StringNullableFilter
  url: StringNullableFilter
  mimetype: StringNullableFilter
  description: StringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageOrderByInput {
  id: OrderDirection
  filesize: OrderDirection
  filename: OrderDirection
  url: OrderDirection
  mimetype: OrderDirection
  description: OrderDirection
}

input ImageUpdateInput {
  filesize: Int
  filename: String
  url: String
  mimetype: String
  description: String
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  filesize: Int
  filename: String
  url: String
  mimetype: String
  description: String
}

type Formation {
  id: ID!
  name: String
  acronym: String
  description: Formation_description_DocumentField
  people(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  peopleCount(where: UserWhereInput! = {}): Int
  parents(
    where: FormationWhereInput! = {}
    orderBy: [FormationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Formation!]
  parentsCount(where: FormationWhereInput! = {}): Int
  children(
    where: FormationWhereInput! = {}
    orderBy: [FormationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Formation!]
  childrenCount(where: FormationWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type Formation_description_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input FormationWhereInput {
  AND: [FormationWhereInput!]
  OR: [FormationWhereInput!]
  NOT: [FormationWhereInput!]
  id: IDFilter
  name: StringNullableFilter
  acronym: StringNullableFilter
  people: UserManyRelationFilter
  parents: FormationManyRelationFilter
  children: FormationManyRelationFilter
  tags: TagManyRelationFilter
  events: EventManyRelationFilter
  posts: PostManyRelationFilter
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input FormationWhereUniqueInput {
  id: ID
}

input FormationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  acronym: OrderDirection
}

input FormationUpdateInput {
  name: String
  acronym: String
  description: JSON
  people: UserRelateToManyForUpdateInput
  parents: FormationRelateToManyForUpdateInput
  children: FormationRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input FormationUpdateArgs {
  where: FormationWhereUniqueInput!
  data: FormationUpdateInput!
}

input FormationCreateInput {
  name: String
  acronym: String
  description: JSON
  people: UserRelateToManyForCreateInput
  parents: FormationRelateToManyForCreateInput
  children: FormationRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

type Event {
  id: ID!
  name: String
  description: Event_description_DocumentField
  eventStart: String
  eventEnd: String
  latitude: Float
  longitude: Float
  url: String
  formations(
    where: FormationWhereInput! = {}
    orderBy: [FormationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Formation!]
  formationsCount(where: FormationWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type Event_description_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringNullableFilter
  eventStart: DateTimeNullableFilter
  eventEnd: DateTimeNullableFilter
  latitude: FloatNullableFilter
  longitude: FloatNullableFilter
  url: StringNullableFilter
  formations: FormationManyRelationFilter
  posts: PostManyRelationFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input EventWhereUniqueInput {
  id: ID
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  eventStart: OrderDirection
  eventEnd: OrderDirection
  latitude: OrderDirection
  longitude: OrderDirection
  url: OrderDirection
}

input EventUpdateInput {
  name: String
  description: JSON
  eventStart: String
  eventEnd: String
  latitude: Float
  longitude: Float
  url: String
  formations: FormationRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  description: JSON
  eventStart: String
  eventEnd: String
  latitude: Float
  longitude: Float
  url: String
  formations: FormationRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  formations(
    where: FormationWhereInput! = {}
    orderBy: [FormationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Formation!]
  formation(where: FormationWhereUniqueInput!): Formation
  formationsCount(where: FormationWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
